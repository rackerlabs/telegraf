// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telegraf.proto

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	telegraf.proto

It has these top-level messages:
	Greeting
	CurrentState
	CurrentStateResponse
	ConfigPack
	Config
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Greeting struct {
	// The identifier of this running instance of remote telegraf
	Tid    string `protobuf:"bytes,1,opt,name=tid" json:"tid,omitempty"`
	Region string `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
}

func (m *Greeting) Reset()                    { *m = Greeting{} }
func (m *Greeting) String() string            { return proto.CompactTextString(m) }
func (*Greeting) ProtoMessage()               {}
func (*Greeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Greeting) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *Greeting) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type CurrentState struct {
	// The identifier of this running instance of remote telegraf
	Tid             string   `protobuf:"bytes,1,opt,name=tid" json:"tid,omitempty"`
	Region          string   `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
	ActiveConfigIds []string `protobuf:"bytes,3,rep,name=activeConfigIds" json:"activeConfigIds,omitempty"`
}

func (m *CurrentState) Reset()                    { *m = CurrentState{} }
func (m *CurrentState) String() string            { return proto.CompactTextString(m) }
func (*CurrentState) ProtoMessage()               {}
func (*CurrentState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CurrentState) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *CurrentState) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CurrentState) GetActiveConfigIds() []string {
	if m != nil {
		return m.ActiveConfigIds
	}
	return nil
}

type CurrentStateResponse struct {
	RemovedId []string `protobuf:"bytes,1,rep,name=removedId" json:"removedId,omitempty"`
}

func (m *CurrentStateResponse) Reset()                    { *m = CurrentStateResponse{} }
func (m *CurrentStateResponse) String() string            { return proto.CompactTextString(m) }
func (*CurrentStateResponse) ProtoMessage()               {}
func (*CurrentStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CurrentStateResponse) GetRemovedId() []string {
	if m != nil {
		return m.RemovedId
	}
	return nil
}

type ConfigPack struct {
	New        []*Config `protobuf:"bytes,1,rep,name=new" json:"new,omitempty"`
	Modified   []*Config `protobuf:"bytes,2,rep,name=modified" json:"modified,omitempty"`
	RemovedIds []string  `protobuf:"bytes,3,rep,name=removedIds" json:"removedIds,omitempty"`
}

func (m *ConfigPack) Reset()                    { *m = ConfigPack{} }
func (m *ConfigPack) String() string            { return proto.CompactTextString(m) }
func (*ConfigPack) ProtoMessage()               {}
func (*ConfigPack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConfigPack) GetNew() []*Config {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *ConfigPack) GetModified() []*Config {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *ConfigPack) GetRemovedIds() []string {
	if m != nil {
		return m.RemovedIds
	}
	return nil
}

type Config struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Definition string `protobuf:"bytes,2,opt,name=definition" json:"definition,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Config) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Config) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func init() {
	proto.RegisterType((*Greeting)(nil), "remote.Greeting")
	proto.RegisterType((*CurrentState)(nil), "remote.CurrentState")
	proto.RegisterType((*CurrentStateResponse)(nil), "remote.CurrentStateResponse")
	proto.RegisterType((*ConfigPack)(nil), "remote.ConfigPack")
	proto.RegisterType((*Config)(nil), "remote.Config")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TelegrafRemote service

type TelegrafRemoteClient interface {
	StartConfigStreaming(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (TelegrafRemote_StartConfigStreamingClient, error)
	ReportState(ctx context.Context, in *CurrentState, opts ...grpc.CallOption) (*CurrentStateResponse, error)
}

type telegrafRemoteClient struct {
	cc *grpc.ClientConn
}

func NewTelegrafRemoteClient(cc *grpc.ClientConn) TelegrafRemoteClient {
	return &telegrafRemoteClient{cc}
}

func (c *telegrafRemoteClient) StartConfigStreaming(ctx context.Context, in *Greeting, opts ...grpc.CallOption) (TelegrafRemote_StartConfigStreamingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TelegrafRemote_serviceDesc.Streams[0], c.cc, "/remote.TelegrafRemote/StartConfigStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &telegrafRemoteStartConfigStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelegrafRemote_StartConfigStreamingClient interface {
	Recv() (*ConfigPack, error)
	grpc.ClientStream
}

type telegrafRemoteStartConfigStreamingClient struct {
	grpc.ClientStream
}

func (x *telegrafRemoteStartConfigStreamingClient) Recv() (*ConfigPack, error) {
	m := new(ConfigPack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telegrafRemoteClient) ReportState(ctx context.Context, in *CurrentState, opts ...grpc.CallOption) (*CurrentStateResponse, error) {
	out := new(CurrentStateResponse)
	err := grpc.Invoke(ctx, "/remote.TelegrafRemote/ReportState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TelegrafRemote service

type TelegrafRemoteServer interface {
	StartConfigStreaming(*Greeting, TelegrafRemote_StartConfigStreamingServer) error
	ReportState(context.Context, *CurrentState) (*CurrentStateResponse, error)
}

func RegisterTelegrafRemoteServer(s *grpc.Server, srv TelegrafRemoteServer) {
	s.RegisterService(&_TelegrafRemote_serviceDesc, srv)
}

func _TelegrafRemote_StartConfigStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Greeting)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelegrafRemoteServer).StartConfigStreaming(m, &telegrafRemoteStartConfigStreamingServer{stream})
}

type TelegrafRemote_StartConfigStreamingServer interface {
	Send(*ConfigPack) error
	grpc.ServerStream
}

type telegrafRemoteStartConfigStreamingServer struct {
	grpc.ServerStream
}

func (x *telegrafRemoteStartConfigStreamingServer) Send(m *ConfigPack) error {
	return x.ServerStream.SendMsg(m)
}

func _TelegrafRemote_ReportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegrafRemoteServer).ReportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.TelegrafRemote/ReportState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegrafRemoteServer).ReportState(ctx, req.(*CurrentState))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelegrafRemote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.TelegrafRemote",
	HandlerType: (*TelegrafRemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportState",
			Handler:    _TelegrafRemote_ReportState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartConfigStreaming",
			Handler:       _TelegrafRemote_StartConfigStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telegraf.proto",
}

func init() { proto.RegisterFile("telegraf.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0xfa, 0x40,
	0x10, 0x35, 0x09, 0x04, 0x1d, 0x7f, 0xe4, 0x57, 0x06, 0x29, 0x41, 0xa4, 0xc8, 0x9e, 0xa4, 0x07,
	0x29, 0xd6, 0x43, 0x8f, 0x05, 0x0f, 0xc5, 0x5b, 0x89, 0xfd, 0x02, 0xd1, 0x9d, 0x84, 0xa5, 0x75,
	0x57, 0xd6, 0xa9, 0x85, 0x7e, 0x91, 0x7e, 0xdd, 0xb2, 0x9b, 0x3f, 0xa6, 0xc5, 0x43, 0x6f, 0xc9,
	0xdb, 0x79, 0xfb, 0xde, 0xbc, 0xb7, 0x90, 0x30, 0xbd, 0x51, 0x69, 0xf3, 0x62, 0x7e, 0xb0, 0x86,
	0x0d, 0xc6, 0x96, 0xf6, 0x86, 0x49, 0x2c, 0xa1, 0xff, 0x64, 0x89, 0x58, 0xe9, 0x12, 0xaf, 0x20,
	0x62, 0x25, 0xd3, 0x60, 0x1a, 0xcc, 0x06, 0x99, 0xfb, 0xc4, 0x6b, 0x88, 0x2d, 0x95, 0xca, 0xe8,
	0x34, 0xf4, 0x60, 0xfd, 0x27, 0xb6, 0xf0, 0x6f, 0xf5, 0x6e, 0x2d, 0x69, 0xde, 0x70, 0xce, 0xf4,
	0x77, 0x26, 0xce, 0xe0, 0x7f, 0xbe, 0x63, 0x75, 0xa2, 0x95, 0xd1, 0x85, 0x2a, 0xd7, 0xf2, 0x98,
	0x46, 0xd3, 0x68, 0x36, 0xc8, 0x7e, 0xc3, 0x62, 0x09, 0xa3, 0xae, 0x46, 0x46, 0xc7, 0x83, 0xd1,
	0x47, 0xc2, 0x09, 0x0c, 0x9c, 0xf7, 0x13, 0xc9, 0xb5, 0x53, 0x74, 0xdc, 0x33, 0x20, 0x3e, 0x01,
	0xaa, 0x2b, 0x9e, 0xf3, 0xdd, 0x2b, 0x4e, 0x21, 0xd2, 0xf4, 0xe1, 0xa7, 0x86, 0x8b, 0x64, 0x5e,
	0xed, 0x3c, 0xaf, 0x06, 0x32, 0x77, 0x84, 0xb7, 0xd0, 0xdf, 0x1b, 0xa9, 0x0a, 0x45, 0x32, 0x0d,
	0x2f, 0x8e, 0xb5, 0xe7, 0x78, 0x03, 0xd0, 0x0a, 0x35, 0xb6, 0x3b, 0x88, 0x78, 0x80, 0xb8, 0xe2,
	0x60, 0x02, 0x61, 0x1b, 0x47, 0xa8, 0x3c, 0x53, 0x52, 0xa1, 0xb4, 0xe2, 0x73, 0x22, 0x1d, 0x64,
	0xf1, 0x15, 0x40, 0xf2, 0x52, 0x17, 0x94, 0x79, 0x75, 0x7c, 0x84, 0xd1, 0x86, 0x73, 0xcb, 0xd5,
	0x8d, 0x1b, 0xb6, 0x94, 0xef, 0x7d, 0x49, 0x8d, 0xbd, 0xa6, 0xb6, 0x31, 0xfe, 0x34, 0xec, 0x16,
	0x17, 0xbd, 0xbb, 0x00, 0x57, 0x30, 0xcc, 0xe8, 0x60, 0x6c, 0xdd, 0xd1, 0xa8, 0x1d, 0xeb, 0xa4,
	0x3a, 0x9e, 0x5c, 0x42, 0x9b, 0xac, 0x45, 0x6f, 0x1b, 0xfb, 0xe7, 0x72, 0xff, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x65, 0x45, 0x9c, 0xff, 0x40, 0x02, 0x00, 0x00,
}
