// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/influxdata/telegraf/remote (interfaces: TelegrafRemoteClient,TelegrafRemote_StartConfigStreamingClient)

package remote_test

import (
	gomock "github.com/golang/mock/gomock"
	remote "github.com/influxdata/telegraf/remote"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockTelegrafRemoteClient is a mock of TelegrafRemoteClient interface
type MockTelegrafRemoteClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegrafRemoteClientMockRecorder
}

// MockTelegrafRemoteClientMockRecorder is the mock recorder for MockTelegrafRemoteClient
type MockTelegrafRemoteClientMockRecorder struct {
	mock *MockTelegrafRemoteClient
}

// NewMockTelegrafRemoteClient creates a new mock instance
func NewMockTelegrafRemoteClient(ctrl *gomock.Controller) *MockTelegrafRemoteClient {
	mock := &MockTelegrafRemoteClient{ctrl: ctrl}
	mock.recorder = &MockTelegrafRemoteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTelegrafRemoteClient) EXPECT() *MockTelegrafRemoteClientMockRecorder {
	return _m.recorder
}

// ReportState mocks base method
func (_m *MockTelegrafRemoteClient) ReportState(_param0 context.Context, _param1 *remote.CurrentState, _param2 ...grpc.CallOption) (*remote.CurrentStateResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReportState", _s...)
	ret0, _ := ret[0].(*remote.CurrentStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportState indicates an expected call of ReportState
func (_mr *MockTelegrafRemoteClientMockRecorder) ReportState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ReportState", reflect.TypeOf((*MockTelegrafRemoteClient)(nil).ReportState), _s...)
}

// StartConfigStreaming mocks base method
func (_m *MockTelegrafRemoteClient) StartConfigStreaming(_param0 context.Context, _param1 *remote.Greeting, _param2 ...grpc.CallOption) (remote.TelegrafRemote_StartConfigStreamingClient, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StartConfigStreaming", _s...)
	ret0, _ := ret[0].(remote.TelegrafRemote_StartConfigStreamingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfigStreaming indicates an expected call of StartConfigStreaming
func (_mr *MockTelegrafRemoteClientMockRecorder) StartConfigStreaming(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "StartConfigStreaming", reflect.TypeOf((*MockTelegrafRemoteClient)(nil).StartConfigStreaming), _s...)
}

// MockTelegrafRemote_StartConfigStreamingClient is a mock of TelegrafRemote_StartConfigStreamingClient interface
type MockTelegrafRemote_StartConfigStreamingClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegrafRemote_StartConfigStreamingClientMockRecorder
}

// MockTelegrafRemote_StartConfigStreamingClientMockRecorder is the mock recorder for MockTelegrafRemote_StartConfigStreamingClient
type MockTelegrafRemote_StartConfigStreamingClientMockRecorder struct {
	mock *MockTelegrafRemote_StartConfigStreamingClient
}

// NewMockTelegrafRemote_StartConfigStreamingClient creates a new mock instance
func NewMockTelegrafRemote_StartConfigStreamingClient(ctrl *gomock.Controller) *MockTelegrafRemote_StartConfigStreamingClient {
	mock := &MockTelegrafRemote_StartConfigStreamingClient{ctrl: ctrl}
	mock.recorder = &MockTelegrafRemote_StartConfigStreamingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTelegrafRemote_StartConfigStreamingClient) EXPECT() *MockTelegrafRemote_StartConfigStreamingClientMockRecorder {
	return _m.recorder
}

// CloseSend mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) CloseSend() error {
	ret := _m.ctrl.Call(_m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) CloseSend() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CloseSend", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).CloseSend))
}

// Context mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) Context() context.Context {
	ret := _m.ctrl.Call(_m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) Context() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Context", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).Context))
}

// Header mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) Header() (metadata.MD, error) {
	ret := _m.ctrl.Call(_m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) Header() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Header", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).Header))
}

// Recv mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) Recv() (*remote.ConfigPack, error) {
	ret := _m.ctrl.Call(_m, "Recv")
	ret0, _ := ret[0].(*remote.ConfigPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) Recv() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Recv", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).Recv))
}

// RecvMsg mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) RecvMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "RecvMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "RecvMsg", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) SendMsg(_param0 interface{}) error {
	ret := _m.ctrl.Call(_m, "SendMsg", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendMsg", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (_m *MockTelegrafRemote_StartConfigStreamingClient) Trailer() metadata.MD {
	ret := _m.ctrl.Call(_m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (_mr *MockTelegrafRemote_StartConfigStreamingClientMockRecorder) Trailer() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Trailer", reflect.TypeOf((*MockTelegrafRemote_StartConfigStreamingClient)(nil).Trailer))
}
